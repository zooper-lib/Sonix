name: Build and Publish

on:
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      publish_to_pub:
        description: 'Publish to pub.dev after building'
        required: false
        default: 'false'
        type: boolean
  
  # Trigger on pushes to main - build and publish
  push:
    branches: [main, master]
  
  # On PR or development branch - build only (no publish)
  pull_request:
    branches: [main, master]

env:
  # Use the latest stable Dart version that satisfies the project requirements
  DART_VERSION: 'stable'

jobs:
  build-native:
    name: Build ${{ matrix.platform }} binary
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
            binary_name: libsonix_native.so
            binary_path: linux/libsonix_native.so
            cmake_generator: "Unix Makefiles"
            
          - platform: macos
            os: macos-latest
            binary_name: libsonix_native.dylib
            binary_path: macos/libsonix_native.dylib
            cmake_generator: "Unix Makefiles"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Fetch full history for proper commits
          fetch-depth: 0

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.16'

      # Platform-specific toolchain setup
      - name: Install build dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config \
            libavcodec-dev libavformat-dev libavutil-dev libswresample-dev

      - name: Setup Xcode (macOS)
        if: matrix.platform == 'macos'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      # Install Flutter dependencies for the project
      - name: Install Flutter dependencies
        run: flutter pub get

      # Ensure FFmpeg is installed on macOS
      - name: Install FFmpeg (macOS)
        if: matrix.platform == 'macos'
        run: |
          brew install ffmpeg

      # Build the native library for distribution
      - name: Build native library for distribution
        run: dart run tool/build_native_for_distribution.dart --platforms current

      # Upload the binary as an artifact (for debugging and manual download)
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: sonix-native-${{ matrix.platform }}
          path: ${{ matrix.binary_path }}
          retention-days: 30

  # Job to commit binaries and publish to pub.dev
  commit-and-publish:
    name: Commit binaries and publish
    needs: build-native
    runs-on: ubuntu-latest
    
    # Only run on push to main/master or manual trigger with publish enabled
    if: |
      (github.event_name == 'push' && contains(fromJson('["main", "master"]'), github.ref_name)) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pub == 'true')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # Download all the built binaries
      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: sonix-native-linux
          path: linux/

      - name: Download macOS binary
        uses: actions/download-artifact@v4
        with:
          name: sonix-native-macos
          path: macos/

      # Verify all binaries are present
      - name: Verify binaries
        run: |
          echo "Checking downloaded binaries..."
          ls -la linux/libsonix_native.so
          ls -la macos/libsonix_native.dylib
          
          echo "Binary sizes:"
          du -h linux/libsonix_native.so
          du -h macos/libsonix_native.dylib

      # Configure git for committing
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # Commit the binaries
      - name: Commit binaries
        id: commit
        run: |
          echo "Checking for changes..."
          git status
          
          echo "Adding binary files..."
          git add linux/libsonix_native.so
          git add macos/libsonix_native.dylib
          
          echo "Checking staged changes..."
          git status
          git diff --staged --name-only
          
          if git diff --staged --quiet; then
            echo "No changes to commit - binaries are already up to date"
            echo "binaries_updated=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected, committing..."
            git commit -m "ü§ñ Update native binaries [skip ci]
            
            Built from commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
            Run: ${{ github.run_id }}"
            
            git push
            echo "‚úÖ Binaries committed and pushed"
            echo "binaries_updated=true" >> $GITHUB_OUTPUT
          fi

      # Get the current version from pubspec.yaml
      - name: Get package version
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: *//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Package version: $VERSION"

      # Validate package before publishing
      - name: Validate package
        run: |
          echo "Running pub publish --dry-run..."
          flutter pub publish --dry-run

      # Publish to pub.dev
      - name: Publish to pub.dev
        uses: k-paxian/dart-package-publisher@v1.6
        with:
          credentialJson: ${{ secrets.PUB_DEV_CREDENTIALS }}
          flutter: true
          skipTests: true

      # Create a git tag for the published version
      - name: Create version tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          TAG="v$VERSION"
          
          # Check if tag already exists
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Tag $TAG already exists, skipping tag creation"
          else
            echo "Creating tag: $TAG"
            git tag -a "$TAG" -m "Release $VERSION"
            git push origin "$TAG"
            echo "‚úÖ Tag $TAG created and pushed"
          fi

      # Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Release ${{ steps.version.outputs.version }}
            
            üöÄ Published to pub.dev: https://pub.dev/packages/sonix/versions/${{ steps.version.outputs.version }}
            
            ### Native Binaries
            - ‚úÖ Linux: `linux/libsonix_native.so`
            - ‚úÖ macOS: `macos/libsonix_native.dylib`
            
            Built from commit: ${{ github.sha }}
          files: |
            linux/libsonix_native.so
            macos/libsonix_native.dylib
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}