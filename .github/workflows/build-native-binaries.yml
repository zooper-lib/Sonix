name: Build Native Binaries

on:
  # Allow manual triggering
  workflow_dispatch:
  
  # Trigger on pushes to main - build and commit binaries
  push:
    branches: [main, master]

env:
  # Use the latest stable Dart version that satisfies the project requirements
  DART_VERSION: 'stable'

jobs:
  build-native:
    name: Build ${{ matrix.platform }} binary
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
            binary_name: libsonix_native.so
            binary_path: linux/libsonix_native.so
            cmake_generator: "Unix Makefiles"
            
          - platform: macos
            os: macos-latest
            binary_name: libsonix_native.dylib
            binary_path: macos/libsonix_native.dylib
            cmake_generator: "Unix Makefiles"
            
          - platform: windows
            os: windows-latest
            binary_name: sonix_native.dll
            binary_path: windows/sonix_native.dll
            cmake_generator: "Ninja"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Fetch full history for proper commits
          fetch-depth: 0

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.16'

      # Platform-specific toolchain setup
      - name: Install build dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          # Use FFmpeg 6.x from PPA to guarantee ABI (soname 60)
          sudo add-apt-repository -y ppa:savoury1/ffmpeg4
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config \
            ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswresample-dev
          # Export SONIX_FFMPEG_ROOT if known (debian packages install into /usr/{lib,include})
          echo "SONIX_FFMPEG_ROOT=/usr" >> $GITHUB_ENV

      - name: Setup Xcode (macOS)
        if: matrix.platform == 'macos'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      # Install Flutter dependencies for the project
      - name: Install Flutter dependencies
        run: flutter pub get

      # Ensure FFmpeg is installed on macOS
      - name: Install FFmpeg (macOS)
        if: matrix.platform == 'macos'
        run: |
          # Prefer FFmpeg@6 for deterministic ABI
          brew install ffmpeg@6 || brew install ffmpeg
          FFMPEG_PREFIX=$(brew --prefix ffmpeg@6 || brew --prefix ffmpeg)
          echo "SONIX_FFMPEG_ROOT=$FFMPEG_PREFIX" >> $GITHUB_ENV

      # Install FFmpeg and dependencies (Windows)
      - name: Setup FFmpeg (Windows)
        if: matrix.platform == 'windows'
        run: |
          # Install MSYS2 which provides pkg-config and FFmpeg dev libraries
          choco install msys2 -y
          
          # Update MSYS2 and install FFmpeg development packages
          C:\tools\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm"
          # Install FFmpeg 6 (current in MSYS2) and pkg-config
          C:\tools\msys64\usr\bin\bash.exe -lc "pacman -S --noconfirm mingw-w64-x86_64-ffmpeg mingw-w64-x86_64-pkg-config"
          
          # Add MSYS2 MinGW64 to PATH for this step and subsequent steps
          echo "C:\tools\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\tools\msys64\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "SONIX_FFMPEG_ROOT=C:\tools\msys64\mingw64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Build the native library for distribution
      - name: Build native library for distribution
        run: dart run tool/build_native_for_distribution.dart --platforms current

      # Upload the binary as an artifact (for debugging and manual download)
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: sonix-native-${{ matrix.platform }}
          path: ${{ matrix.binary_path }}
          retention-days: 30

  # Job to commit binaries back to repository
  commit-binaries:
    name: Commit binaries
    needs: build-native
    runs-on: ubuntu-latest
    
    # Only run on push to main/master
    if: github.event_name == 'push' && contains(fromJson('["main", "master"]'), github.ref_name)
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # Download all the built binaries
      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: sonix-native-linux
          path: linux/

      - name: Download macOS binary
        uses: actions/download-artifact@v4
        with:
          name: sonix-native-macos
          path: macos/

      - name: Download Windows binary
        uses: actions/download-artifact@v4
        with:
          name: sonix-native-windows
          path: windows/

      # Verify all binaries are present
      - name: Verify binaries
        run: |
          echo "Checking downloaded binaries..."
          ls -la linux/libsonix_native.so
          ls -la macos/libsonix_native.dylib
          ls -la windows/sonix_native.dll
          
          echo "Binary sizes:"
          du -h linux/libsonix_native.so
          du -h macos/libsonix_native.dylib
          du -h windows/sonix_native.dll

      # Configure git for committing
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      # Commit the binaries
      - name: Commit binaries
        id: commit
        run: |
          echo "Checking for changes..."
          git status
          
          echo "Adding binary files..."
          git add linux/libsonix_native.so
          git add macos/libsonix_native.dylib
          git add windows/sonix_native.dll
          
          echo "Checking staged changes..."
          git status
          git diff --staged --name-only
          
          if git diff --staged --quiet; then
            echo "No changes to commit - binaries are already up to date"
            echo "binaries_updated=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected, committing..."
            git commit -m "ðŸ¤– Update native binaries [skip ci]
            
            Built from commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
            Run: ${{ github.run_id }}"
            
            git push
            echo "âœ… Binaries committed and pushed"
            echo "binaries_updated=true" >> $GITHUB_OUTPUT
          fi